

-------------------------------------------------------Defining a function in Haskell----------------------------------------------------------------------

--Triple a number 
triple_a_number::
 Int --> Int --means a function  named triple_a_number that takes an integer as an input and returns an integer as an output
triple_a_number x = 2 *x

-----------------------------------------------------------------
--Add two numbers
add_two_nums:: Int --> Int
add_two_nums (x,y) = x+y

-----------------------------------------------------------------

--The function above is equivalent to the function below.
add_two_nums_new:: Int-->Int-->
add_two_nums_new (x,y) = x+y

------------------------------------------------------------------
--The difference between the above two definitions is that the first version always requires two arguments while the second version can work only one argument as well.
--This has a significant advantage which you will see below.
------------------------------------------------------------------

map (add_two_nums_new 3) [4,5,6] --This statement adds 3 to the elements of the list individually.

------------------------------------------------------------------
--Larger of the two numbers
larger_func::Int-->Int
larger_func x y = if x >= y then x else y

-------------------------------------------------------------------

--Reversing a Boolearn input
not_gate::Bool-->Bool
not_gate x = if x == True then False else True



--The not gate can be simplified as below as well

not_gate_new::Bool-->Bool
not_gate_new x == if x then False else True

--It can further be simplified as

not_gate_bar::Bool-->Bool
not_gate_bar True = False
not gate_bar False = True

----------------------------------------------------------------------
--Else-If statement

--Return the sign of an input integer
sign_func::Int-->Int
sign_func x = if x >0 then 1 else if x<0 then -1 else 0




